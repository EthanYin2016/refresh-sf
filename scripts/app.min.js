window.ENV={},window.ENV.apiUrl="http://refresh-sf.herokuapp.com/",Ember.TEMPLATES.compressor=Ember.Handlebars.template(function(a,b,c,d,e){function f(a,b){var d,e,f="";return b.buffer.push('\n\n  <div class="row">\n    <div class="col-sm-6"><h2>Input</h2></div>\n    <div class="col-sm-6 text-right compressed-actions">\n      <div class="btn-group">\n        <button type="button" '),b.buffer.push(o(c["bind-attr"].call(a,{hash:{disabled:"isCompressing","class":":btn guessJavascript:btn-primary:btn-default"},hashTypes:{disabled:"ID","class":"STRING"},hashContexts:{disabled:a,"class":a},contexts:[],types:[],data:b}))),b.buffer.push(" "),b.buffer.push(o(c.action.call(a,"compress","javascript",{hash:{},hashTypes:{},hashContexts:{},contexts:[a,a],types:["STRING","STRING"],data:b}))),b.buffer.push('><span class="glyphicon glyphicon-resize-small"></span> Javascript</button>\n        <button type="button" '),b.buffer.push(o(c["bind-attr"].call(a,{hash:{disabled:"isCompressing","class":":btn guessCss:btn-primary:btn-default"},hashTypes:{disabled:"ID","class":"STRING"},hashContexts:{disabled:a,"class":a},contexts:[],types:[],data:b}))),b.buffer.push(" "),b.buffer.push(o(c.action.call(a,"compress","css",{hash:{},hashTypes:{},hashContexts:{},contexts:[a,a],types:["STRING","STRING"],data:b}))),b.buffer.push('><span class="glyphicon glyphicon-resize-small"></span> CSS</button>\n        <button type="button" '),b.buffer.push(o(c["bind-attr"].call(a,{hash:{disabled:"htmlDisabled","class":":btn guessHtml:btn-primary:btn-default"},hashTypes:{disabled:"ID","class":"STRING"},hashContexts:{disabled:a,"class":a},contexts:[],types:[],data:b}))),b.buffer.push(" "),b.buffer.push(o(c.action.call(a,"compress","html",{hash:{},hashTypes:{},hashContexts:{},contexts:[a,a],types:["STRING","STRING"],data:b}))),b.buffer.push('><span class="glyphicon glyphicon-resize-small"></span> HTML</button>\n      </div>\n    </div>\n  </div>\n\n  <div class="row">\n    <div class="col-lg-12">\n      <div class="form-group">\n        '),b.buffer.push(o(c.view.call(a,"drag-and-drop",{hash:{value:"input","class":"form-control input",rows:"10",placeholder:"Paste your JavaScript or CSS code here, or drag in files from your desktop.",disabled:"isCompressing"},hashTypes:{value:"ID","class":"STRING",rows:"STRING",placeholder:"STRING",disabled:"ID"},hashContexts:{value:a,"class":a,rows:a,placeholder:a,disabled:a},contexts:[a],types:["STRING"],data:b}))),b.buffer.push('\n      </div>\n    </div>\n  </div>\n\n  <ul class="nav nav-tabs" role="tablist">\n    <li role="presentation" class="active"><a href="#options" role="tab" data-toggle="tab">Options</a></li>\n    <li role="presentation"><a href="#uglify" role="tab" data-toggle="tab">UglifyJS 2</a></li>\n    <li role="presentation"><a href="#cleancss" role="tab" data-toggle="tab">Clean-CSS</a></li>\n    <li role="presentation"><a href="#htmlminifier" role="tab" data-toggle="tab">HTML Minifier</a></li>\n    <li role="presentation"><a href="#yui" role="tab" data-toggle="tab">YUI Compressor</a></li>\n  </ul>\n\n  <div class="tab-content">\n    <div role="tabpanel" class="tab-pane active" id="options">'),b.buffer.push(o((d=c.partial||a&&a.partial,e={hash:{},hashTypes:{},hashContexts:{},contexts:[a],types:["STRING"],data:b},d?d.call(a,"options/options",e):p.call(a,"partial","options/options",e)))),b.buffer.push('</div>\n    <div role="tabpanel" class="tab-pane" id="uglify">'),b.buffer.push(o((d=c.partial||a&&a.partial,e={hash:{},hashTypes:{},hashContexts:{},contexts:[a],types:["STRING"],data:b},d?d.call(a,"options/uglify",e):p.call(a,"partial","options/uglify",e)))),b.buffer.push('</div>\n    <div role="tabpanel" class="tab-pane" id="cleancss">'),b.buffer.push(o((d=c.partial||a&&a.partial,e={hash:{},hashTypes:{},hashContexts:{},contexts:[a],types:["STRING"],data:b},d?d.call(a,"options/cleancss",e):p.call(a,"partial","options/cleancss",e)))),b.buffer.push('</div>\n    <div role="tabpanel" class="tab-pane" id="htmlminifier">'),b.buffer.push(o((d=c.partial||a&&a.partial,e={hash:{},hashTypes:{},hashContexts:{},contexts:[a],types:["STRING"],data:b},d?d.call(a,"options/htmlminifier",e):p.call(a,"partial","options/htmlminifier",e)))),b.buffer.push('</div>\n    <div role="tabpanel" class="tab-pane" id="yui">'),b.buffer.push(o((d=c.partial||a&&a.partial,e={hash:{},hashTypes:{},hashContexts:{},contexts:[a],types:["STRING"],data:b},d?d.call(a,"options/yui",e):p.call(a,"partial","options/yui",e)))),b.buffer.push("</div>\n  </div>\n\n  <hr>\n\n"),f}function g(a,b){var d,e="";return b.buffer.push('\n\n  <div class="row">\n    <div class="col-lg-6">\n      <h2>Compressed '),d=c._triageMustache.call(a,"displayLanguage",{hash:{},hashTypes:{},hashContexts:{},contexts:[a],types:["ID"],data:b}),(d||0===d)&&b.buffer.push(d),b.buffer.push('</h2>\n    </div>\n    <div class="col-lg-6 text-right compressed-actions">\n      '),d=c["if"].call(a,"error",{hash:{},hashTypes:{},hashContexts:{},inverse:q.program(6,i,b),fn:q.program(4,h,b),contexts:[a],types:["ID"],data:b}),(d||0===d)&&b.buffer.push(d),b.buffer.push('\n    </div>\n  </div>\n\n  <div class="row">\n    <div class="col-lg-12">\n      '),b.buffer.push(o(c.view.call(a,"output-text-area",{hash:{classBinding:":form-control :alert error:alert-danger:alert-success",rows:"10",value:"output"},hashTypes:{classBinding:"STRING",rows:"STRING",value:"ID"},hashContexts:{classBinding:a,rows:a,value:a},contexts:[a],types:["STRING"],data:b}))),b.buffer.push('\n    </div>\n  </div>\n\n  <div class="row">\n    <div class="col-lg-12">\n      <button type="button" class="btn btn-primary" '),b.buffer.push(o(c.action.call(a,"createGist",{hash:{},hashTypes:{},hashContexts:{},contexts:[a],types:["STRING"],data:b}))),b.buffer.push(">Create Anonymous Gist</button>\n      "),d=c["if"].call(a,"gistUrl",{hash:{},hashTypes:{},hashContexts:{},inverse:q.noop,fn:q.program(8,j,b),contexts:[a],types:["ID"],data:b}),(d||0===d)&&b.buffer.push(d),b.buffer.push("\n    </div>\n  </div>\n\n"),e}function h(a,b){var d="";return b.buffer.push('\n        <button type="button" class="btn btn-default" '),b.buffer.push(o(c.action.call(a,"resetCompressor",{hash:{},hashTypes:{},hashContexts:{},contexts:[a],types:["STRING"],data:b}))),b.buffer.push('><span class="glyphicon glyphicon-refresh"></span> Reset</button>\n      '),d}function i(a,b){var d,e,f="";return b.buffer.push('\n        <div class="input-group">\n          '),b.buffer.push(o((d=c.input||a&&a.input,e={hash:{"class":"form-control",value:"filename"},hashTypes:{"class":"STRING",value:"ID"},hashContexts:{"class":a,value:a},contexts:[],types:[],data:b},d?d.call(a,e):p.call(a,"input",e)))),b.buffer.push('\n          <span class="input-group-btn">\n            <button type="button" class="btn btn-primary" '),b.buffer.push(o(c.action.call(a,"save",{hash:{},hashTypes:{},hashContexts:{},contexts:[a],types:["STRING"],data:b}))),b.buffer.push(" "),b.buffer.push(o(c["bind-attr"].call(a,{hash:{disabled:"saveDisabled"},hashTypes:{disabled:"ID"},hashContexts:{disabled:a},contexts:[],types:[],data:b}))),b.buffer.push('><span class="glyphicon glyphicon-save"></span> Save</button>\n            <button type="button" class="btn btn-primary" '),b.buffer.push(o(c.action.call(a,"saveGzip",{hash:{},hashTypes:{},hashContexts:{},contexts:[a],types:["STRING"],data:b}))),b.buffer.push('><span class="glyphicon glyphicon-resize-small"></span> gzip</button>\n            <button type="button" class="btn btn-default" '),b.buffer.push(o(c.action.call(a,"resetCompressor",{hash:{},hashTypes:{},hashContexts:{},contexts:[a],types:["STRING"],data:b}))),b.buffer.push('><span class="glyphicon glyphicon-refresh"></span> Reset</button>\n          </span>\n        </div>\n      '),f}function j(a,b){var d,e="";return b.buffer.push("<a "),b.buffer.push(o(c["bind-attr"].call(a,{hash:{href:"gistUrl"},hashTypes:{href:"ID"},hashContexts:{href:a},contexts:[],types:[],data:b}))),b.buffer.push(">"),d=c._triageMustache.call(a,"gistUrl",{hash:{},hashTypes:{},hashContexts:{},contexts:[a],types:["ID"],data:b}),(d||0===d)&&b.buffer.push(d),b.buffer.push("</a>"),e}this.compilerInfo=[4,">= 1.0.0"],c=this.merge(c,Ember.Handlebars.helpers),e=e||{};var k,l,m,n="",o=this.escapeExpression,p=c.helperMissing,q=this;return k=c.unless.call(b,"output",{hash:{},hashTypes:{},hashContexts:{},inverse:q.program(3,g,e),fn:q.program(1,f,e),contexts:[b],types:["ID"],data:e}),(k||0===k)&&e.buffer.push(k),e.buffer.push("\n\n\n<form "),e.buffer.push(o(c["bind-attr"].call(b,{hash:{action:"gzipUrl"},hashTypes:{action:"ID"},hashContexts:{action:b},contexts:[],types:[],data:e}))),e.buffer.push(' method="post">\n  '),e.buffer.push(o((l=c.input||b&&b.input,m={hash:{name:"code",value:"output",type:"hidden"},hashTypes:{name:"STRING",value:"ID",type:"STRING"},hashContexts:{name:b,value:b,type:b},contexts:[],types:[],data:e},l?l.call(b,m):p.call(b,"input",m)))),e.buffer.push("\n</form>\n"),n}),Ember.TEMPLATES["options/cleancss"]=Ember.Handlebars.template(function(a,b,c,d,e){this.compilerInfo=[4,">= 1.0.0"],c=this.merge(c,Ember.Handlebars.helpers),e=e||{};var f,g,h="",i=this.escapeExpression,j=c.helperMissing;return e.buffer.push('<button type="button" class="btn btn-primary" '),e.buffer.push(i(c.action.call(b,"defaultOptions","css",{hash:{},hashTypes:{},hashContexts:{},contexts:[b,b],types:["STRING","STRING"],data:e}))),e.buffer.push('>Use Clean-CSS Defaults</button>\n\n<div class="checkbox">\n  <label>\n    '),e.buffer.push(i((f=c.input||b&&b.input,g={hash:{type:"checkbox",checked:"compressOptions.css.options.advanced"},hashTypes:{type:"STRING",checked:"ID"},hashContexts:{type:b,checked:b},contexts:[],types:[],data:e},f?f.call(b,g):j.call(b,"input",g)))),e.buffer.push('\n    <code>advanced</code> - set to false to disable advanced optimizations - selector &amp; property merging, reduction, etc.\n  </label>\n</div>\n<div class="checkbox">\n  <label>\n    '),e.buffer.push(i((f=c.input||b&&b.input,g={hash:{type:"checkbox",checked:"compressOptions.css.options.aggressiveMerging"},hashTypes:{type:"STRING",checked:"ID"},hashContexts:{type:b,checked:b},contexts:[],types:[],data:e},f?f.call(b,g):j.call(b,"input",g)))),e.buffer.push('\n    <code>aggressiveMerging</code> - set to false to disable aggressive merging of properties.\n  </label>\n</div>\n<div class="checkbox">\n  <label>\n    '),e.buffer.push(i((f=c.input||b&&b.input,g={hash:{type:"checkbox",checked:"compressOptions.css.options.benchmark"},hashTypes:{type:"STRING",checked:"ID"},hashContexts:{type:b,checked:b},contexts:[],types:[],data:e},f?f.call(b,g):j.call(b,"input",g)))),e.buffer.push('\n    <code>benchmark</code> - turns on benchmarking mode measuring time spent on cleaning up (run npm run bench to see example)\n  </label>\n</div>\n<div class="checkbox">\n  <label>\n    '),e.buffer.push(i((f=c.input||b&&b.input,g={hash:{type:"checkbox",checked:"compressOptions.css.options.compatibility"},hashTypes:{type:"STRING",checked:"ID"},hashContexts:{type:b,checked:b},contexts:[],types:[],data:e},f?f.call(b,g):j.call(b,"input",g)))),e.buffer.push('\n    <code>compatibility</code> - enables compatibility mode, see below for more examples\n  </label>\n</div>\n<div class="checkbox">\n  <label>\n    '),e.buffer.push(i((f=c.input||b&&b.input,g={hash:{type:"checkbox",checked:"compressOptions.css.options.debug"},hashTypes:{type:"STRING",checked:"ID"},hashContexts:{type:b,checked:b},contexts:[],types:[],data:e},f?f.call(b,g):j.call(b,"input",g)))),e.buffer.push('\n    <code>debug</code> - set to true to get minification statistics under stats property (see test/custom-test.js for examples)\n  </label>\n</div>\n<div class="checkbox">\n  <label>\n    '),e.buffer.push(i((f=c.input||b&&b.input,g={hash:{type:"checkbox",checked:"compressOptions.css.options.inliner",placeholder:"JSON format"},hashTypes:{type:"STRING",checked:"ID",placeholder:"STRING"},hashContexts:{type:b,checked:b,placeholder:b},contexts:[],types:[],data:e},f?f.call(b,g):j.call(b,"input",g)))),e.buffer.push('\n    <code>inliner</code> - a hash of options for @import inliner, see test/protocol-imports-test.js for examples\n  </label>\n</div>\n<div class="checkbox">\n  <label>\n    '),e.buffer.push(i((f=c.input||b&&b.input,g={hash:{type:"checkbox",checked:"compressOptions.css.options.keepBreaks"},hashTypes:{type:"STRING",checked:"ID"},hashContexts:{type:b,checked:b},contexts:[],types:[],data:e},f?f.call(b,g):j.call(b,"input",g)))),e.buffer.push('\n    <code>keepBreaks</code> - whether to keep line breaks\n  </label>\n</div>\n<div class="checkbox">\n  <label>\n    '),e.buffer.push(i((f=c.input||b&&b.input,g={hash:{type:"checkbox",checked:"compressOptions.css.options.processImport"},hashTypes:{type:"STRING",checked:"ID"},hashContexts:{type:b,checked:b},contexts:[],types:[],data:e},f?f.call(b,g):j.call(b,"input",g)))),e.buffer.push('\n    <code>processImport</code> - whether to process @import rules\n  </label>\n</div>\n<div class="checkbox">\n  <label>\n    '),e.buffer.push(i((f=c.input||b&&b.input,g={hash:{type:"checkbox",checked:"compressOptions.css.options.rebase"},hashTypes:{type:"STRING",checked:"ID"},hashContexts:{type:b,checked:b},contexts:[],types:[],data:e},f?f.call(b,g):j.call(b,"input",g)))),e.buffer.push('\n    <code>rebase</code> - set to false to skip URL rebasing\n  </label>\n</div>\n<div class="form-group">\n  <label><code>keepSpecialComments</code></label>\n  '),e.buffer.push(i((f=c.input||b&&b.input,g={hash:{"class":"form-control",value:"compressOptions.css.options.keepSpecialComments"},hashTypes:{"class":"STRING",value:"ID"},hashContexts:{"class":b,value:b},contexts:[],types:[],data:e},f?f.call(b,g):j.call(b,"input",g)))),e.buffer.push('\n  <p class="help-block">* for keeping all, 1 for keeping first one only, 0 for removing all</p>\n</div>\n<div class="form-group">\n  <label><code>relativeTo</code></label>\n  '),e.buffer.push(i((f=c.input||b&&b.input,g={hash:{"class":"form-control",value:"compressOptions.css.options.relativeTo"},hashTypes:{"class":"STRING",value:"ID"},hashContexts:{"class":b,value:b},contexts:[],types:[],data:e},f?f.call(b,g):j.call(b,"input",g)))),e.buffer.push('\n  <p class="help-block">path to <strong>resolve</strong> relative @import rules and URLs</p>\n</div>\n<div class="form-group">\n  <label><code>root</code></label>\n  '),e.buffer.push(i((f=c.input||b&&b.input,g={hash:{"class":"form-control",value:"compressOptions.css.options.root"},hashTypes:{"class":"STRING",value:"ID"},hashContexts:{"class":b,value:b},contexts:[],types:[],data:e},f?f.call(b,g):j.call(b,"input",g)))),e.buffer.push('\n  <p class="help-block">path to <strong>resolve</strong> absolute @import rules and <strong>rebase</strong> relative URLs</p>\n</div>\n<div class="form-group">\n  <label><code>roundingPrecision</code></label>\n  '),e.buffer.push(i((f=c.input||b&&b.input,g={hash:{type:"number","class":"form-control",value:"compressOptions.css.options.roundingPrecision"},hashTypes:{type:"STRING","class":"STRING",value:"ID"},hashContexts:{type:b,"class":b,value:b},contexts:[],types:[],data:e},f?f.call(b,g):j.call(b,"input",g)))),e.buffer.push('\n  <p class="help-block">rounding precision; -1 disables rounding</p>\n</div>\n<div class="form-group">\n  <label><code>target</code></label>\n  '),e.buffer.push(i((f=c.input||b&&b.input,g={hash:{"class":"form-control",value:"compressOptions.css.options.target"},hashTypes:{"class":"STRING",value:"ID"},hashContexts:{"class":b,value:b},contexts:[],types:[],data:e},f?f.call(b,g):j.call(b,"input",g)))),e.buffer.push('\n  <p class="help-block">path to a folder or an output file to which <strong>rebase</strong> all URLs</p>\n</div>\n'),h}),Ember.TEMPLATES["options/htmlminifier"]=Ember.Handlebars.template(function(a,b,c,d,e){this.compilerInfo=[4,">= 1.0.0"],c=this.merge(c,Ember.Handlebars.helpers),e=e||{},e.buffer.push("Todo: Add HTML minifier options.\n")}),Ember.TEMPLATES["options/options"]=Ember.Handlebars.template(function(a,b,c,d,e){this.compilerInfo=[4,">= 1.0.0"],c=this.merge(c,Ember.Handlebars.helpers),e=e||{},e.buffer.push("<p>The default options are good for 99%. For you 1%, all compressor options are available. <code>localStorage</code> is used to save selections.</p>\n")}),Ember.TEMPLATES["options/uglify"]=Ember.Handlebars.template(function(a,b,c,d,e){this.compilerInfo=[4,">= 1.0.0"],c=this.merge(c,Ember.Handlebars.helpers),e=e||{};var f,g,h="",i=this.escapeExpression,j=c.helperMissing;return e.buffer.push('<button type="button" class="btn btn-primary" '),e.buffer.push(i(c.action.call(b,"defaultOptions","javascript",{hash:{},hashTypes:{},hashContexts:{},contexts:[b,b],types:["STRING","STRING"],data:e}))),e.buffer.push('>Use UglifyJS 2 Defaults</button>\n\n<div class="checkbox">\n  <label>\n    '),e.buffer.push(i((f=c.input||b&&b.input,g={hash:{type:"checkbox",checked:"compressOptions.javascript.options.sequences"},hashTypes:{type:"STRING",checked:"ID"},hashContexts:{type:b,checked:b},contexts:[],types:[],data:e},f?f.call(b,g):j.call(b,"input",g)))),e.buffer.push('\n    <code>sequences</code> &mdash; join consecutive simple statements using the comma operator\n  </label>\n</div>\n<div class="checkbox">\n  <label>\n    '),e.buffer.push(i((f=c.input||b&&b.input,g={hash:{type:"checkbox",checked:"compressOptions.javascript.options.properties"},hashTypes:{type:"STRING",checked:"ID"},hashContexts:{type:b,checked:b},contexts:[],types:[],data:e},f?f.call(b,g):j.call(b,"input",g)))),e.buffer.push('\n    <code>properties</code> &mdash; rewrite property access using the dot notation, for example foo["bar"] → foo.bar\n  </label>\n</div>\n<div class="checkbox">\n  <label>\n    '),e.buffer.push(i((f=c.input||b&&b.input,g={hash:{type:"checkbox",checked:"compressOptions.javascript.options.dead_code"},hashTypes:{type:"STRING",checked:"ID"},hashContexts:{type:b,checked:b},contexts:[],types:[],data:e},f?f.call(b,g):j.call(b,"input",g)))),e.buffer.push('\n    <code>dead_code</code> &mdash; remove unreachable code\n  </label>\n</div>\n<div class="checkbox">\n  <label>\n    '),e.buffer.push(i((f=c.input||b&&b.input,g={hash:{type:"checkbox",checked:"compressOptions.javascript.options.drop_debugger"},hashTypes:{type:"STRING",checked:"ID"},hashContexts:{type:b,checked:b},contexts:[],types:[],data:e},f?f.call(b,g):j.call(b,"input",g)))),e.buffer.push('\n    <code>drop_debugger</code> &mdash; remove debugger; statements\n  </label>\n</div>\n<div class="checkbox">\n  <label>\n    '),e.buffer.push(i((f=c.input||b&&b.input,g={hash:{type:"checkbox",checked:"compressOptions.javascript.options.unsafe"},hashTypes:{type:"STRING",checked:"ID"},hashContexts:{type:b,checked:b},contexts:[],types:[],data:e},f?f.call(b,g):j.call(b,"input",g)))),e.buffer.push('\n    <code>unsafe</code> &mdash; default false. apply "unsafe" transformations\n  </label>\n</div>\n<div class="checkbox">\n  <label>\n    '),e.buffer.push(i((f=c.input||b&&b.input,g={hash:{type:"checkbox",checked:"compressOptions.javascript.options.conditionals"},hashTypes:{type:"STRING",checked:"ID"},hashContexts:{type:b,checked:b},contexts:[],types:[],data:e},f?f.call(b,g):j.call(b,"input",g)))),e.buffer.push('\n    <code>conditionals</code> &mdash; apply optimizations for if-s and conditional expressions\n  </label>\n</div>\n<div class="checkbox">\n  <label>\n    '),e.buffer.push(i((f=c.input||b&&b.input,g={hash:{type:"checkbox",checked:"compressOptions.javascript.options.comparisons"},hashTypes:{type:"STRING",checked:"ID"},hashContexts:{type:b,checked:b},contexts:[],types:[],data:e},f?f.call(b,g):j.call(b,"input",g)))),e.buffer.push('\n    <code>comparisons</code> &mdash; apply certain optimizations to binary nodes, for example: !(a <= b) → a > b (only when unsafe), attempts to negate binary nodes, e.g. a = !b && !c && !d && !e → a=!(b||c||d||e) etc.\n  </label>\n</div>\n<div class="checkbox">\n  <label>\n    '),e.buffer.push(i((f=c.input||b&&b.input,g={hash:{type:"checkbox",checked:"compressOptions.javascript.options.evaluate"},hashTypes:{type:"STRING",checked:"ID"},hashContexts:{type:b,checked:b},contexts:[],types:[],data:e},f?f.call(b,g):j.call(b,"input",g)))),e.buffer.push('\n    <code>evaluate</code> &mdash; attempt to evaluate constant expressions\n  </label>\n</div>\n<div class="checkbox">\n  <label>\n    '),e.buffer.push(i((f=c.input||b&&b.input,g={hash:{type:"checkbox",checked:"compressOptions.javascript.options.booleans"},hashTypes:{type:"STRING",checked:"ID"},hashContexts:{type:b,checked:b},contexts:[],types:[],data:e},f?f.call(b,g):j.call(b,"input",g)))),e.buffer.push('\n    <code>booleans</code> &mdash; various optimizations for boolean context, for example !!a ? b : c → a ? b : c\n  </label>\n</div>\n<div class="checkbox">\n  <label>\n    '),e.buffer.push(i((f=c.input||b&&b.input,g={hash:{type:"checkbox",checked:"compressOptions.javascript.options.loops"},hashTypes:{type:"STRING",checked:"ID"},hashContexts:{type:b,checked:b},contexts:[],types:[],data:e},f?f.call(b,g):j.call(b,"input",g)))),e.buffer.push('\n    <code>loops</code> &mdash; optimizations for do, while and for loops when we can statically determine the condition\n  </label>\n</div>\n<div class="checkbox">\n  <label>\n    '),e.buffer.push(i((f=c.input||b&&b.input,g={hash:{type:"checkbox",checked:"compressOptions.javascript.options.unused"},hashTypes:{type:"STRING",checked:"ID"},hashContexts:{type:b,checked:b},contexts:[],types:[],data:e},f?f.call(b,g):j.call(b,"input",g)))),e.buffer.push('\n    <code>unused</code> &mdash; drop unreferenced functions and variables\n  </label>\n</div>\n<div class="checkbox">\n  <label>\n    '),e.buffer.push(i((f=c.input||b&&b.input,g={hash:{type:"checkbox",checked:"compressOptions.javascript.options.hoist_funs"},hashTypes:{type:"STRING",checked:"ID"},hashContexts:{type:b,checked:b},contexts:[],types:[],data:e},f?f.call(b,g):j.call(b,"input",g)))),e.buffer.push('\n    <code>hoist_funs</code> &mdash; hoist function declarations\n  </label>\n</div>\n<div class="checkbox">\n  <label>\n    '),e.buffer.push(i((f=c.input||b&&b.input,g={hash:{type:"checkbox",checked:"compressOptions.javascript.options.hoist_vars"},hashTypes:{type:"STRING",checked:"ID"},hashContexts:{type:b,checked:b},contexts:[],types:[],data:e},f?f.call(b,g):j.call(b,"input",g)))),e.buffer.push('\n    <code>hoist_vars</code> &mdash; default false. hoist var declarations (this is false by default because it seems to increase the size of the output in general)\n  </label>\n</div>\n<div class="checkbox">\n  <label>\n    '),e.buffer.push(i((f=c.input||b&&b.input,g={hash:{type:"checkbox",checked:"compressOptions.javascript.options.if_return"},hashTypes:{type:"STRING",checked:"ID"},hashContexts:{type:b,checked:b},contexts:[],types:[],data:e},f?f.call(b,g):j.call(b,"input",g)))),e.buffer.push('\n    <code>if_return</code> &mdash; optimizations for if/return and if/continue\n  </label>\n</div>\n<div class="checkbox">\n  <label>\n    '),e.buffer.push(i((f=c.input||b&&b.input,g={hash:{type:"checkbox",checked:"compressOptions.javascript.options.join_vars"},hashTypes:{type:"STRING",checked:"ID"},hashContexts:{type:b,checked:b},contexts:[],types:[],data:e},f?f.call(b,g):j.call(b,"input",g)))),e.buffer.push('\n    <code>join_vars</code> &mdash; join consecutive var statements\n  </label>\n</div>\n<div class="checkbox">\n  <label>\n    '),e.buffer.push(i((f=c.input||b&&b.input,g={hash:{type:"checkbox",checked:"compressOptions.javascript.options.cascade"},hashTypes:{type:"STRING",checked:"ID"},hashContexts:{type:b,checked:b},contexts:[],types:[],data:e},f?f.call(b,g):j.call(b,"input",g)))),e.buffer.push('\n    <code>cascade</code> &mdash; small optimization for sequences, transform x, x into x and x = something(), x into x = something()\n  </label>\n</div>\n<div class="checkbox">\n  <label>\n    '),e.buffer.push(i((f=c.input||b&&b.input,g={hash:{type:"checkbox",checked:"compressOptions.javascript.options.warnings"},hashTypes:{type:"STRING",checked:"ID"},hashContexts:{type:b,checked:b},contexts:[],types:[],data:e},f?f.call(b,g):j.call(b,"input",g)))),e.buffer.push('\n    <code>warnings</code> &mdash; display warnings when dropping unreachable code or unused declarations etc.\n  </label>\n</div>\n<div class="checkbox">\n  <label>\n    '),e.buffer.push(i((f=c.input||b&&b.input,g={hash:{type:"checkbox",checked:"compressOptions.javascript.options.negate_iife"},hashTypes:{type:"STRING",checked:"ID"},hashContexts:{type:b,checked:b},contexts:[],types:[],data:e},f?f.call(b,g):j.call(b,"input",g)))),e.buffer.push('\n    <code>negate_iife</code> &mdash; negate "Immediately-Called Function Expressions" where the return value is discarded, to avoid the parens that the code generator would insert.\n  </label>\n</div>\n<div class="checkbox">\n  <label>\n    '),e.buffer.push(i((f=c.input||b&&b.input,g={hash:{type:"checkbox",checked:"compressOptions.javascript.options.pure_getters"},hashTypes:{type:"STRING",checked:"ID"},hashContexts:{type:b,checked:b},contexts:[],types:[],data:e},f?f.call(b,g):j.call(b,"input",g)))),e.buffer.push('\n    <code>pure_getters</code> &mdash; the default is false. If you pass true for this, UglifyJS will assume that object property access (e.g. foo.bar or foo["bar"]) doesn\'t have any side effects.\n  </label>\n</div>\n<div class="checkbox">\n  <label>\n    '),e.buffer.push(i((f=c.input||b&&b.input,g={hash:{type:"checkbox",checked:"compressOptions.javascript.options.drop_console"},hashTypes:{type:"STRING",checked:"ID"},hashContexts:{type:b,checked:b},contexts:[],types:[],data:e},f?f.call(b,g):j.call(b,"input",g)))),e.buffer.push('\n    <code>drop_console</code> &mdash; default false. Pass true to discard calls to console.* functions.\n  </label>\n</div>\n<div class="checkbox">\n  <label>\n    '),e.buffer.push(i((f=c.input||b&&b.input,g={hash:{type:"checkbox",checked:"compressOptions.javascript.options.keep_fargs"},hashTypes:{type:"STRING",checked:"ID"},hashContexts:{type:b,checked:b},contexts:[],types:[],data:e},f?f.call(b,g):j.call(b,"input",g)))),e.buffer.push('\n    <code>keep_fargs</code> &mdash; default false. Pass true to prevent the compressor from discarding unused function arguments. You need this for code which relies on Function.length.\n  </label>\n</div>\n<div class="form-group">\n  <label><code>pure_funcs</code></label>\n  '),e.buffer.push(i((f=c.input||b&&b.input,g={hash:{"class":"form-control",placeholder:"comma separated list",value:"compressOptions.javascript.options.pure_funcs_cs"},hashTypes:{"class":"STRING",placeholder:"STRING",value:"ID"},hashContexts:{"class":b,placeholder:b,value:b},contexts:[],types:[],data:e},f?f.call(b,g):j.call(b,"input",g)))),e.buffer.push('\n  <p class="help-block">default null. You can pass an array of names and UglifyJS will assume that those functions do not produce side effects. <span class="text-danger">DANGER: will not check if the name is redefined in scope.</span> An example case here, for instance var q = Math.floor(a/b). If variable q is not used elsewhere, UglifyJS will drop it, but will still keep the Math.floor(a/b), not knowing what it does. You can pass pure_funcs: [ \'Math.floor\' ] to let it know that this function won\'t produce any side effect, in which case the whole statement would get discarded. The current implementation adds some overhead (compression will be slower).</p>\n</div>\n'),h}),Ember.TEMPLATES["options/yui"]=Ember.Handlebars.template(function(a,b,c,d,e){function f(a,b){b.buffer.push('\n    <span class="text-warning">YUI Compressor does not support HTML compression.</span>\n      ')}function g(a,b){var d,e,f="";return b.buffer.push("\n    <label>\n      "),b.buffer.push(k((d=c.input||a&&a.input,e={hash:{type:"checkbox",checked:"useYui"},hashTypes:{type:"STRING",checked:"ID"},hashContexts:{type:a,checked:a},contexts:[],types:[],data:b},d?d.call(a,e):j.call(a,"input",e)))),b.buffer.push("\n      Use YUI Compressor instead of UglifyJS/Clean-CSS.\n    </label>\n  "),f}this.compilerInfo=[4,">= 1.0.0"],c=this.merge(c,Ember.Handlebars.helpers),e=e||{};var h,i="",j=c.helperMissing,k=this.escapeExpression,l=this;return e.buffer.push("<div "),e.buffer.push(k(c["bind-attr"].call(b,{hash:{"class":":form-group isHtml::checkbox"},hashTypes:{"class":"STRING"},hashContexts:{"class":b},contexts:[],types:[],data:e}))),e.buffer.push(">\n  "),h=c["if"].call(b,"isHtml",{hash:{},hashTypes:{},hashContexts:{},inverse:l.program(3,g,e),fn:l.program(1,f,e),contexts:[b],types:["ID"],data:e}),(h||0===h)&&e.buffer.push(h),e.buffer.push("\n</div>\n\nTodo: Add YUI Compressor options.\n"),i}),function(){var a=Ember.Object.create();["sequences","properties","dead_code","drop_debugger","conditionals","comparisons","evaluate","booleans","loops","unused","hoist_funs","if_return","join_vars","cascade","warnings","negate_iife"].forEach(function(b){a.set(b,!0)}),["unsafe","hoist_vars","pure_getters","drop_console","keep_fargs"].forEach(function(b){a.set(b,!1)}),a.set("pure_funcs_cs",null);var b=Ember.Object.create(a);Ember.keys(b).forEach(function(c){var d="uglify."+c,e=localStorage.getItem(d);null!==e&&""!==e&&("true"===e&&(e=!0),"false"===e&&(e=!1),b.set(c,e)),b.addObserver(c,function(){b.get(c)===a.get(c)?localStorage.removeItem(d):localStorage.setItem(d,b.get(c))})}),b.reopen({pure_funcs:function(){return Ember.isEmpty(this.get("pure_funcs_cs"))?null:this.get("pure_funcs_cs").split(",").map(function(a){return Ember.$.trim(a)})}.property("pure_funcs_cs"),serialize:function(){var a={};for(var b in $.extend(!0,{},this))"serialize"!==b&&"pure_funcs_cs"!==b&&this.hasOwnProperty(b)&&"function"!=typeof this[b]&&(a[b]=this[b]);return a.pure_funcs=this.get("pure_funcs"),a},reset:function(){var b=this;Ember.keys(a).forEach(function(c){"pure_funcs"===c?b.set("pure_funcs_cs",null):b.set(c,a.get(c))})}}),window.uglifyOptions=Ember.Object.create({options:b,"default":a})}(),function(){var a=Ember.Object.create();["advanced","aggressiveMerging","rebase","processImport"].forEach(function(b){a.set(b,!0)}),["benchmark","compatibility","keepBreaks","debug"].forEach(function(b){a.set(b,!1)}),["inliner","relativeTo","root","target"].forEach(function(b){a.set(b,null)}),a.set("keepSpecialComments","*"),a.set("roundingPrecision",2);var b=Ember.Object.create(a);Ember.keys(b).forEach(function(c){var d="uglify."+c,e=localStorage.getItem(d);null!==e&&""!==e&&("true"===e&&(e=!0),"false"===e&&(e=!1),b.set(c,e)),b.addObserver(c,function(){b.get(c)===a.get(c)?localStorage.removeItem(d):localStorage.setItem(d,b.get(c))})}),b.reopen({serialize:function(){var a={};for(var b in $.extend(!0,{},this))"serialize"!==b&&this.hasOwnProperty(b)&&"function"!=typeof this[b]&&(a[b]=this[b]);return a},reset:function(){var b=this;Ember.keys(a).forEach(function(c){b.set(c,a.get(c))})}}),window.cleancssOptions=Ember.Object.create({defaults:a,options:b})}(),function(){"use strict";Ember.throttledObserver=function(a,b,c){return Em.observer(function(){Em.run.throttle(this,a,c)},b)};var a=Ember.Application.create({rootElement:"#compressor",LOG_ACTIVE_GENERATION:!0,LOG_MODULE_RESOLVER:!0,LOG_TRANSITIONS:!0,LOG_TRANSITIONS_INTERNAL:!0,LOG_VIEW_LOOKUPS:!0});a.Router.map(function(){this.route("compressor",{path:"/"})}),a.CompressorRoute=Ember.Route.extend(),a.CompressorController=Ember.Controller.extend({apiUrl:window.ENV.apiUrl,language:null,languages:["javascript","css","html"],useYui:localStorage.getItem("useYui"),compressOptions:Ember.Object.create({javascript:window.uglifyOptions,css:window.cleancssOptions}),htmlDisabled:function(){return this.get("isCompressing")||this.get("useYui")}.property("isCompressing","useYui"),rememberYui:function(){this.get("useYui")?localStorage.setItem("useYui",!0):localStorage.removeItem("useYui")}.observes("useYui"),isHtml:function(){return"html"===this.get("language")}.property("language"),gzipUrl:function(){return this.get("apiUrl")+"gz/"+this.get("filename")}.property("apiUrl","filename"),saveDisabled:function(){return!this.get("filename")}.property("filename"),compressDisabled:function(){return!this.get("input")||!this.get("language")||this.get("isCompressing")}.property("input","language","isCompressing"),guessJavascript:function(){return"javascript"===this.get("language")
}.property("language"),guessCss:function(){return"css"===this.get("language")}.property("language"),guessHtml:function(){return"html"===this.get("language")}.property("language"),checkLanguage:Ember.throttledObserver(function(){if(this.set("unknownLanguage",null),this.set("language",null),!Ember.isEmpty(this.get("input"))){var a=this.get("input").replace(),b=hljs.highlightAuto(a,this.get("languages"));this.set("language",b.language),this.get("language")||this.set("unknownLanguage",!0)}},"input",500),displayLanguage:function(){switch(this.get("language")){case"javascript":return"Javascript";case"css":return"CSS";case"html":return"HTML";default:return null}}.property("language"),compress:function(a){if(!a)return Ember.RSVP.Promise.reject("Compression requires a language.");if(!this.get("input"))return Ember.RSVP.Promise.reject("Compression requires input.");this.set("isCompressing",!0);var b=this.get("useYui")&&"html"!==a?"yui":a,c=this.get("compressOptions").get(b).get("options").serialize();return new Ember.RSVP.Promise(function(a,d){Ember.$.ajax({url:this.get("apiUrl")+b+"/",type:"post",data:{code:this.get("input"),type:this.get("language"),options:c},dataType:"json"}).done(function(b){a(b.code)}.bind(this)).fail(function(a){d(a.responseJSON.yuiError?a.responseJSON.yuiError:JSON.stringify(a.responseJSON,null,2))}.bind(this)).always(function(){this.set("isCompressing",!1)}.bind(this))}.bind(this))},actions:{compress:function(a){a=a||this.get("language"),this.set("output",null),this.set("error",null),this.compress(a).then(function(b){if(this.set("output",b),!this.get("filename"))switch(a){case"css":this.set("filename","style.min.css");break;case"javascript":this.set("filename","app.min.js");break;case"html":this.set("filename","index.min.html")}}.bind(this),function(a){this.set("error",!0),this.set("output",a)}.bind(this))},save:function(){var a=new Blob([this.get("output")],{type:"text/"+this.get("language")+";charset=utf-8"});saveAs(a,this.get("filename"))},saveGzip:function(){Ember.$("form").trigger("submit")},resetCompressor:function(){this.set("input",null),this.set("output",null)},createGist:function(){var a=this,b={files:{}};b.files[this.get("filename")]={content:this.get("output")},$.ajax({url:"https://api.github.com/gists",type:"POST",dataType:"json",data:JSON.stringify(b)}).done(function(b){a.set("gistUrl",b.files[a.get("filename")].raw_url)})},defaultOptions:function(a){this.get("compressOptions").get(a).get("options").reset()}}}),a.DragAndDropView=Ember.TextArea.extend({didInsertElement:function(){this.$().fileReaderJS({accept:"text/*",dragClass:"dragging",readAsDefault:"Text",on:{load:function(a,b){this.set("value",this.getWithDefault("value","")+a.target.result);var c=b.name.split(".");c.splice(-1,0,"min"),this.set("parentView.controller.filename",c.join("."))}.bind(this)}}),this.$().focus().select()}}),a.OutputTextAreaView=Ember.TextArea.extend({didInsertElement:function(){this.get("parentView.controller.error")||this.$().focus().select()}}),window.App=a}();